---
- name: Read and Display File Contents
  hosts: nawala
  become: yes
  vars:
    # Default file path - can be overridden when running the playbook
    target_file: "/etc/hosts"
  tasks:
    - name: Check if target file exists
      stat:
        path: "{{ target_file }}"
      register: file_stat
      tags:
        - cat_method
        - cat_display
        - add_new
    
    - name: Display error if file doesn't exist
      debug:
        msg: "ERROR: File {{ target_file }} does not exist on the target host"
      when: not file_stat.stat.exists
    
    # METHOD 1: Using slurp (commented out but available)
    # - name: Read file contents
    #   slurp:
    #     src: "{{ target_file }}"
    #   register: file_content
    #   when: file_stat.stat.exists
    # - name: Display file contents
    #   debug:
    #     msg: "{{ file_content.content | b64decode }}"
    #   when:
    #     - file_stat.stat.exists
    #     - file_content is defined
    
    # METHOD 2: Using cat command
    - name: Alternative method - using cat command
      command: cat {{ target_file }}
      register: cat_output
      when: file_stat.stat.exists
      changed_when: false
      tags:
        - cat_method
        - cat_display
    
    - name: Display cat output
      debug:
        var: cat_output.stdout_lines
      when:
        - file_stat.stat.exists
        - cat_output is defined
      tags:
        - cat_method
        - cat_display
    
    # METHOD 3: Replace line in file
    - name: Replace line in file
      lineinfile:
        path: "{{ target_file }}"
        regexp: "^{{ old_line | regex_escape() }}$"
        line: "{{ new_line }}"
        backup: yes
      when:
        - old_line is defined
        - new_line is defined
      tags:
        - edit_line
        - modify_file
    
    - name: Verify line replacement
      command: grep "{{ new_line }}" {{ target_file }}
      register: verify_output
      when:
        - old_line is defined
        - new_line is defined
      changed_when: false
      failed_when: false
      tags:
        - edit_line
        - verify_edit
    
    - name: Display verification result
      debug:
        msg: "Line successfully replaced: {{ verify_output.stdout }}"
      when:
        - verify_output is defined
        - verify_output.rc == 0
      tags:
        - verify_edit
    
    # METHOD 4: Add new line to file
    - name: Add new line to file
      lineinfile:
        path: "{{ target_file }}"
        line: "{{ add_line }}"
        insertafter: "{{ insert_after | default('EOF') }}"
        backup: yes
        create: yes
      when:
        - add_line is defined
        - file_stat.stat.exists
      tags:
        - add_new
        - add_line
    
    - name: Add new line at specific position
      lineinfile:
        path: "{{ target_file }}"
        line: "{{ add_line }}"
        insertbefore: "{{ insert_before }}"
        backup: yes
      when:
        - add_line is defined
        - insert_before is defined
        - file_stat.stat.exists
      tags:
        - add_new
        - add_line_before
    
    - name: Verify new line addition
      command: grep "{{ add_line }}" {{ target_file }}
      register: verify_add_output
      when:
        - add_line is defined
        - file_stat.stat.exists
      changed_when: false
      failed_when: false
      tags:
        - add_new
        - verify_add
    
    - name: Display add verification result
      debug:
        msg: "Line successfully added: {{ verify_add_output.stdout }}"
      when:
        - verify_add_output is defined
        - verify_add_output.rc == 0
      tags:
        - add_new
        - verify_add
    
    - name: Display final file contents after modifications
      command: cat {{ target_file }}
      register: final_cat_output
      when: file_stat.stat.exists
      changed_when: false
      tags:
        - add_new
        - final_display
    
    - name: Show final file contents
      debug:
        var: final_cat_output.stdout_lines
      when:
        - file_stat.stat.exists
        - final_cat_output is defined
      tags:
        - add_new
        - final_display
    
    # METHOD 5: Reload Nginx service
    - name: Check nginx configuration syntax
      command: nginx -t
      register: nginx_config_check
      changed_when: false
      failed_when: false
      tags:
        - reload_nginx
        - nginx_config
    
#    - name: Display nginx configuration check result
#      debug:
#        msg: "Nginx configuration check: {{ nginx_config_check.stderr }}"
#      when: nginx_config_check is defined
#      tags:
#        - reload_nginx
#        - nginx_config
    
    - name: Reload nginx service if configuration is valid
      service:
        name: nginx
        state: reloaded
      when: 
        - nginx_config_check is defined
        - nginx_config_check.rc == 0
      tags:
        - reload_nginx
        - nginx_reload
    
    - name: Alternative reload method using systemctl
      command: systemctl reload nginx
      register: systemctl_reload
      when: 
        - nginx_config_check is defined
        - nginx_config_check.rc == 0
        - reload_method is defined
        - reload_method == "systemctl"
      changed_when: systemctl_reload.rc == 0
      failed_when: systemctl_reload.rc != 0
      tags:
        - reload_nginx
        - systemctl_reload
    
    - name: Check nginx service status after reload
      service:
        name: nginx
        state: started
      register: nginx_status
      tags:
        - reload_nginx
        - nginx_status
    
    - name: Display nginx service status
      debug:
        msg: "Nginx service is running successfully"
      when: nginx_status is defined and nginx_status.changed == false
      tags:
        - reload_nginx
        - nginx_status
    
    - name: Force restart nginx if reload fails
      service:
        name: nginx
        state: restarted
      when:
        - force_restart is defined
        - force_restart == true
      tags:
        - reload_nginx
        - force_restart
    
    - name: Verify nginx is listening on configured ports
      command: netstat -tlnp | grep nginx
      register: nginx_ports
      changed_when: false
      failed_when: false
      tags:
        - reload_nginx
        - verify_ports
    
 #   - name: Display nginx listening ports
 #     debug:
 #       msg: "Nginx listening ports: {{ nginx_ports.stdout_lines }}"
 #     when:
 #       - nginx_ports is defined
 #       - nginx_ports.stdout_lines is defined
 #     tags:
 #       - reload_nginx
 #       - verify_ports
