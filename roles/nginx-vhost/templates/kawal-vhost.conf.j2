 map $http_cookie $has_sticky_cookie {
        default 0;
        ~sticky_dash86=([a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9])_{{ fresh_domains[0] }}     1;
        ~sticky_dash86=([a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9])_{{ fresh_domains[1] }}   1;
    }

    map $http_cookie $sticky_sub {
        default "";
        ~sticky_dash86=([a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9])_.* $1;
    }

    map $http_cookie $sticky_domain {
        default "";
        ~sticky_dash86=[a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9]_(.*) $1;
    }

    # âœ… Distribute randomly based on last digit
    map $msec$remote_port $selected_fresh {
        ~.*[0-4]$ "{{ fresh_domains[0] }}";
        ~.*[5-9]$ "{{ fresh_domains[1] }}";
        default "{{ fresh_domains[0] }}";
    }

server {
    listen 443;
    server_name {{ item.1 }};
    
    
    location / {
        set $temp "${request_id}${msec}${remote_port}";
        set $random_str "";
        set $fallback_str "";
        
        # Primary match
        if ($temp ~ "([0-9a-fA-F])([0-9])([0-9a-fA-F])([0-9])([0-9a-fA-F])") {
            set $random_str "$1$2$3$4$5";
        }
        
        # Fallback match (not nested)
        if ($random_str = "") {
            set $fallback_str "$request_id";
        }
        
        # Extract from fallback if needed (not strict but safe)
        if ($fallback_str ~ "^([0-9a-f]{2})([0-9a-f]{2})([0-9a-f])") {
            set $random_str "$1$2$3";
        }
        
        # Ultimate fallback
        if ($random_str = "") {
            set $random_str "a1b2c";
        }
        
        # Use sticky cookie if available
        if ($has_sticky_cookie_{{ item.1 | replace('.', '_') }}) {
            return 302 https://$sticky_sub_{{ item.1 | replace('.', '_') }}.$sticky_domain_{{ item.1 | replace('.', '_') }}$request_uri;
        }
        
        # Set cookie and redirect
        add_header Set-Cookie "sticky_{{ item.0.name }}=${random_str}_$selected_fresh_{{ item.1 | replace('.', '_') }}; Path=/; Max-Age=604800; HttpOnly; Secure; SameSite=Lax";
        return 302 https://$random_str.$selected_fresh_{{ item.1 | replace('.', '_') }}$request_uri;
    }
    
    # Health check endpoint
    location /health {
        access_log off;
        return 200 "OK\n";
        add_header Content-Type text/plain;
    }
    
    error_log /var/log/nginx/{{ item.0.name }}_{{ item.1 | replace('.', '_') }}_error.log;
    access_log /var/log/nginx/{{ item.0.name }}_{{ item.1 | replace('.', '_') }}_access.log;
}