map $http_cookie $has_sticky_cookie_{{ item.1 | replace('.', '_') }} {
    default 0;
    {% for fresh_domain in item.0.fresh_domains %}
    ~sticky_{{ item.0.name }}=([a-zA-Z0-9]{5})_{{ fresh_domain | regex_escape() }}     1;
    {% endfor %}
}

map $http_cookie $sticky_sub_{{ item.1 | replace('.', '_') }} {
    default "";
    ~sticky_{{ item.0.name }}=([a-zA-Z0-9]{5})_.* $1;
}

map $http_cookie $sticky_domain_{{ item.1 | replace('.', '_') }} {
    default "";
    ~sticky_{{ item.0.name }}=[a-zA-Z0-9]{5}_(.*) $1;
}

# Distribute randomly based on last digit
map $msec$remote_port $selected_fresh_{{ item.1 | replace('.', '_') }} {
    {% set fresh_domains = item.0.fresh_domains %}
    {% set domains_count = fresh_domains | length %}
    {% if domains_count == 2 %}
    ~.*[0-4]$ "{{ fresh_domains[0] }}";
    ~.*[5-9]$ "{{ fresh_domains[1] }}";
    {% elif domains_count == 3 %}
    ~.*[0-2]$ "{{ fresh_domains[0] }}";
    ~.*[3-5]$ "{{ fresh_domains[1] }}";
    ~.*[6-9]$ "{{ fresh_domains[2] }}";
    {% elif domains_count == 4 %}
    ~.*[0-1]$ "{{ fresh_domains[0] }}";
    ~.*[2-4]$ "{{ fresh_domains[1] }}";
    ~.*[5-7]$ "{{ fresh_domains[2] }}";
    ~.*[8-9]$ "{{ fresh_domains[3] }}";
    {% else %}
        {% for i in range(domains_count) %}
            {% set start_digit = (i * 10) // domains_count %}
            {% set end_digit = ((i + 1) * 10) // domains_count - 1 %}
            {% if start_digit == end_digit %}
    ~.*{{ start_digit }}$ "{{ fresh_domains[i] }}";
            {% else %}
    ~.*[{{ start_digit }}-{{ end_digit }}]$ "{{ fresh_domains[i] }}";
            {% endif %}
        {% endfor %}
    {% endif %}
    default "{{ fresh_domains[0] if fresh_domains else 'example.com' }}";
}


server {
    listen 443;
    server_name {{ item.1 }};
    
    
    location / {
        set $temp "${request_id}${msec}${remote_port}";
        set $random_str "";
        set $fallback_str "";
        
        # Primary match
        if ($temp ~ "([0-9a-fA-F])([0-9])([0-9a-fA-F])([0-9])([0-9a-fA-F])") {
            set $random_str "$1$2$3$4$5";
        }
        
        # Fallback match (not nested)
        if ($random_str = "") {
            set $fallback_str "$request_id";
        }
        
        # Extract from fallback if needed (not strict but safe)
        if ($fallback_str ~ "^([0-9a-f]{2})([0-9a-f]{2})([0-9a-f])") {
            set $random_str "$1$2$3";
        }
        
        # Ultimate fallback
        if ($random_str = "") {
            set $random_str "a1b2c";
        }
        
        # Use sticky cookie if available
        if ($has_sticky_cookie_{{ item.1 | replace('.', '_') }}) {
            return 302 https://$sticky_sub_{{ item.1 | replace('.', '_') }}.$sticky_domain_{{ item.1 | replace('.', '_') }}$request_uri;
        }
        
        # Set cookie and redirect
        add_header Set-Cookie "sticky_{{ item.0.name }}=${random_str}_$selected_fresh_{{ item.1 | replace('.', '_') }}; Path=/; Max-Age=604800; HttpOnly; Secure; SameSite=Lax";
        return 302 https://$random_str.$selected_fresh_{{ item.1 | replace('.', '_') }}$request_uri;
    }
    
    # Health check endpoint
    location /health {
        access_log off;
        return 200 "OK\n";
        add_header Content-Type text/plain;
    }
    
    error_log /var/log/nginx/{{ item.0.name }}_{{ item.1 | replace('.', '_') }}_error.log;
    access_log /var/log/nginx/{{ item.0.name }}_{{ item.1 | replace('.', '_') }}_access.log;
}