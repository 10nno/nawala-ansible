server {
    listen 443;
    server_name {{ item.1 }};
    location / {
        # Check for existing sticky cookie
        set $sticky_sub "";
        set $sticky_domain "";
        set $has_sticky 0;
        
        if ($http_cookie ~* "sticky_{{ item.0.name }}=([a-zA-Z0-9]{5})_([^;]+)") {
            set $sticky_sub $1;
            set $sticky_domain $2;
            set $has_sticky 1;
        }

        # Validate sticky domain is still in our list
        set $valid_sticky 0;
        {% if item.0.fresh_domains is defined %}
        {% for fresh_domain in item.0.fresh_domains %}
        if ($sticky_domain = "{{ fresh_domain }}") {
            set $valid_sticky 1;
        }
        {% endfor %}
        {% endif %}

        # Check if we should use sticky
        set $use_sticky "${has_sticky}${valid_sticky}";
        
        # If we have a valid sticky cookie, use it
        if ($use_sticky = "11") {
            return 302 https://$sticky_sub.$sticky_domain$request_uri;
        }

        # Generate new random subdomain
        set $temp "${request_id}${msec}${remote_port}";
        set $random_str "";
        
        # Extract alphanumeric characters
        if ($temp ~ "([0-9a-fA-F])([0-9])([0-9a-fA-F])([0-9])([0-9a-fA-F])") {
            set $random_str "$1$2$3$4$5";
        }
        
        # Fallback pattern
        if ($random_str = "") {
            if ($request_id ~ "^([0-9a-f]{2})([0-9a-f]{2})([0-9a-f])") {
                set $random_str "$1$2$3";
            }
        }
        
        # Ultimate fallback
        if ($random_str = "") {
            set $random_str "a1b2c";
        }

        # Select fresh domain based on simple hash of IP and time
        {% if item.0.fresh_domains is defined and item.0.fresh_domains|length > 0 %}
        {% set fresh_domains_list = item.0.fresh_domains %}
        {% set domain_count = fresh_domains_list|length %}
        
        # Extract last digits from variables for distribution
        set $selector "${msec}${remote_port}";
        set $selected_fresh "";
        
        # Simple modulo-like distribution using last digit
        if ($selector ~ "(\d)$") {
            set $last_digit $1;
        }
        
        # Map digit to fresh domain
        {% for i in range(domain_count) %}
        {% set start_digit = (i * 10) // domain_count %}
        {% set end_digit = ((i + 1) * 10) // domain_count - 1 %}
        if ($last_digit ~ "^[{{ start_digit }}-{{ end_digit }}]$") {
            set $selected_fresh "{{ fresh_domains_list[i] }}";
        }
        {% endfor %}
        
        # Fallback to first domain
        if ($selected_fresh = "") {
            set $selected_fresh "{{ fresh_domains_list[0] }}";
        }
        {% else %}
        set $selected_fresh "example.com";
        {% endif %}

        # Set sticky cookie
        add_header Set-Cookie "sticky_{{ item.0.name }}=${random_str}_${selected_fresh}; Path=/; Max-Age=604800; HttpOnly; Secure; SameSite=Lax";
        
        return 302 https://$random_str.$selected_fresh$request_uri;
    }

}