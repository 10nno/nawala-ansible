map $http_cookie $has_sticky_cookie {
    default 0;
    {% for fresh_domain in item.0.fresh_domains %}
    ~sticky_{{ item.0.name }}=([a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9])_{{ fresh_domain }}     1;
    {% endfor %}
}

map $http_cookie $sticky_sub {
    default "";
    ~sticky_{{ item.0.name }}=([a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9])_.* $1;
}

map $http_cookie $sticky_domain {
    default "";
    ~sticky_{{ item.0.name }}=[a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9]_(.*) $1;
}

# âœ… Distribute randomly based on last digit
map $msec$remote_port $selected_fresh {
    {% set fresh_domains = item.0.fresh_domains %}
    {% if fresh_domains|length == 2 %}
    ~.*[0-4]$ "{{ fresh_domains[0] }}";
    ~.*[5-9]$ "{{ fresh_domains[1] }}";
    {% elif fresh_domains|length == 3 %}
    ~.*[0-2]$ "{{ fresh_domains[0] }}";
    ~.*[3-5]$ "{{ fresh_domains[1] }}";
    ~.*[6-9]$ "{{ fresh_domains[2] }}";
    {% else %}
    {% for i in range(fresh_domains|length) %}
    {% set start = (i * 10) // fresh_domains|length %}
    {% set end = ((i + 1) * 10) // fresh_domains|length - 1 %}
    ~.*[{{ start }}-{{ end }}]$ "{{ fresh_domains[i] }}";
    {% endfor %}
    {% endif %}
    default "{{ fresh_domains[0] }}";
}

server {
    listen 80;
    server_name {{ item.1 }};
    location / {
        set $temp "${request_id}${msec}${remote_port}";
        set $random_str "";
        set $fallback_str "";
        
        # Primary match
        if ($temp ~ "([0-9a-fA-F])([0-9])([0-9a-fA-F])([0-9])([0-9a-fA-F])") {
            set $random_str "$1$2$3$4$5";
        }
        
        # Fallback match (not nested)
        if ($random_str = "") {
            set $fallback_str "$request_id";
        }
        
        # Extract from fallback if needed (not strict but safe)
        if ($fallback_str ~ "^([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f])") {
            set $random_str "$1$2$3";
        }
        
        # Ultimate fallback
        if ($random_str = "") {
            set $random_str "a1b2c";
        }
        
        # Use sticky cookie if available
        if ($has_sticky_cookie) {
            return 302 https://$sticky_sub.$sticky_domain$request_uri;
        }
        
        # Set cookie and redirect
        add_header Set-Cookie "sticky_{{ item.0.name }}=${random_str}_${selected_fresh}; Path=/; Max-Age=604800; HttpOnly; Secure; SameSite=Lax";
        return 302 https://$random_str.$selected_fresh$request_uri;
    }
}