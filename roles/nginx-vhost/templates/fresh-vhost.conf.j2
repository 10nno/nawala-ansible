server {
    listen 80;
    server_name *.{{ item.1 }};
    return 302 https://$host$request_uri;
}

server {
    listen 443 ssl;
    ssl_certificate /etc/letsencrypt/live/{{ item.1 }}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/{{ item.1 }}/privkey.pem;

    server_name *.{{ item.1 }};

    location / {
        proxy_ssl_server_name on;
        proxy_pass http://{{ item.0.main_domain }}/;
        proxy_set_header Accept-Encoding "";
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header Cookie $http_cookie;
        
        # Enable sub_filter module
        sub_filter_once off; # Replace all occurrences, not just the first one
        sub_filter 'http://{{ item.0.main_domain }}' '$scheme://$host';
        sub_filter 'action="https://{{ item.0.main_domain }}/register"' 'action="https://$host/register"';
        sub_filter_types text/html text/javascript application/javascript;
        # apply everywhere
        # sub_filter_types *;
        
        proxy_redirect http://{{ item.0.main_domain }}/ /;
        sub_filter 'https://{{ item.0.main_domain }}' '$scheme://$host';
        sub_filter '{{ item.0.main_domain }}' '$host';
        
        {% if item.0.canon_domain is defined %}
        # Handle canonical domain
        sub_filter 'http://{{ item.0.canon_domain }}' '$scheme://$host';
        sub_filter 'https://{{ item.0.canon_domain }}' '$scheme://$host';
        sub_filter '{{ item.0.canon_domain }}' '$host';
        proxy_redirect http://{{ item.0.canon_domain }}/ /;
        {% endif %}
    }
}