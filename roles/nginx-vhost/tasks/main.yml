---
- name: Ensure nginx is installed
  apt:
    name: nginx
    state: present

- name: Check if Cloudflare credentials exist
  stat:
    path: /etc/letsencrypt/cloudflare.ini
  register: cloudflare_creds

- name: Ensure Cloudflare credentials are configured
  fail:
    msg: "Cloudflare credentials file not found at /etc/letsencrypt/cloudflare.ini"
  when: not cloudflare_creds.stat.exists

# Create kawal domain configurations (all-in-one)
- name: Create kawal domain vhost configurations
  template:
    src: kawal-vhost.conf.j2
    dest: "/etc/nginx/sites-available/{{ item.0.name }}-kawal-{{ item.1 | replace('.', '_') }}.conf"
    mode: '0644'
  with_subelements:
    - "{{ vhosts }}"
    - kawal_domains
    - skip_missing: True
  notify: reload nginx

# # Generate SSL certificates for kawal domains
# - name: Generate SSL certificate for kawal domains
#   command: >
#     certbotcf certonly --dns-cloudflare
#     --dns-cloudflare-credentials /etc/letsencrypt/cloudflare.ini
#     -d {{ item.1 }}
#     --non-interactive
#     --agree-tos
#   args:
#     creates: "/etc/letsencrypt/live/{{ item.1 }}/fullchain.pem"
#   with_subelements:
#     - "{{ vhosts }}"
#     - kawal_domains
#     - skip_missing: True
#   register: kawal_ssl_generation

# Generate SSL certificates for each fresh domain
- name: Generate SSL certificate for fresh domains
  command: >
    certbot certonly --dns-cloudflare
    --dns-cloudflare-credentials /etc/letsencrypt/cloudflare.ini
    -d {{ fresh_domain }}
    -d *.{{ fresh_domain }}
    --non-interactive
    --agree-tos
  args:
    creates: "/etc/letsencrypt/live/{{ fresh_domain }}/fullchain.pem"
  with_subelements:
    - "{{ vhosts }}"
    - fresh_domains
    - skip_missing: True
  vars:
    fresh_domain: "{{ item.1 }}"
  register: fresh_ssl_generation

- name: Wait for DNS propagation if SSL was generated
  pause:
    seconds: 30
  when: kawal_ssl_generation.changed or fresh_ssl_generation.changed

# Create fresh domain configurations
- name: Create fresh domain vhost configurations
  template:
    src: fresh-vhost.conf.j2
    dest: "/etc/nginx/sites-available/{{ item.0.name }}-fresh-{{ item.1 | replace('.', '_') }}.conf"
    mode: '0644'
  with_subelements:
    - "{{ vhosts }}"
    - fresh_domains
    - skip_missing: True
  notify: reload nginx

# Enable kawal domain vhosts
- name: Enable kawal domain vhosts
  file:
    src: "/etc/nginx/sites-available/{{ item.0.name }}-kawal-{{ item.1 | replace('.', '_') }}.conf"
    dest: "/etc/nginx/sites-enabled/{{ item.0.name }}-kawal-{{ item.1 | replace('.', '_') }}.conf"
    state: link
  with_subelements:
    - "{{ vhosts }}"
    - kawal_domains
    - skip_missing: True
  notify: reload nginx

# Enable fresh domain vhosts
- name: Enable fresh domain vhosts
  file:
    src: "/etc/nginx/sites-available/{{ item.0.name }}-fresh-{{ item.1 | replace('.', '_') }}.conf"
    dest: "/etc/nginx/sites-enabled/{{ item.0.name }}-fresh-{{ item.1 | replace('.', '_') }}.conf"
    state: link
  with_subelements:
    - "{{ vhosts }}"
    - fresh_domains
    - skip_missing: True
  notify: reload nginx

# Test nginx configuration
- name: Test nginx configuration
  command: nginx -t
  register: nginx_test
  changed_when: false
  ignore_errors: yes

- name: Display nginx test result
  debug:
    var: nginx_test.stdout_lines

- name: Display nginx test errors if any
  debug:
    var: nginx_test.stderr_lines
  when: nginx_test.rc != 0

# Create debug script
- name: Create debug script for testing sticky cookies
  copy:
    dest: /usr/local/bin/test-sticky.sh
    mode: '0755'
    content: |
      #!/bin/bash
      DOMAIN="${1:-dashaktif24jam.com}"
      echo "Testing sticky cookies for: $DOMAIN"
      echo "================================"
      
      # First request
      echo -e "\n1. Initial request (no cookie):"
      RESPONSE=$(curl -s -I -k "https://$DOMAIN")
      echo "$RESPONSE" | grep -E "(Location:|Set-Cookie:|X-Debug-)"
      
      # Extract cookie and location
      COOKIE=$(echo "$RESPONSE" | grep -i "set-cookie:" | grep -o "sticky_[^;]*" | head -1)
      LOCATION=$(echo "$RESPONSE" | grep -i "location:" | awk '{print $2}' | tr -d '\r')
      
      echo -e "\nExtracted:"
      echo "  Cookie: $COOKIE"
      echo "  Redirect: $LOCATION"
      
      # Test with cookie
      if [ -n "$COOKIE" ]; then
          echo -e "\n2. Subsequent requests with cookie (should be same location):"
          for i in {1..3}; do
              echo -n "  Attempt $i: "
              curl -s -I -k -H "Cookie: $COOKIE" "https://$DOMAIN" | grep -i "location:" | awk '{print $2}' | tr -d '\r'
              sleep 0.2
          done
      fi
      
      echo -e "\n================================"