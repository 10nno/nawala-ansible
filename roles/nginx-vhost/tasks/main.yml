---
- name: Ensure nginx is installed
  apt:
    name: nginx
    state: present

- name: Check if Cloudflare credentials exist
  stat:
    path: /etc/letsencrypt/cloudflare.ini
  register: cloudflare_creds

- name: Ensure Cloudflare credentials are configured
  fail:
    msg: "Cloudflare credentials file not found at /etc/letsencrypt/cloudflare.ini"
  when: not cloudflare_creds.stat.exists
# Add this task to roles/nginx-vhost/tasks/main.yml at the beginning, before the SSL certificate generation

- name: Extract canonical domain from origin
  block:
    - name: Fetch HTML content from origin domain
      uri:
        url: "https://{{ item.main_domain }}"
        method: GET
        return_content: yes
        validate_certs: yes
        timeout: 30
      register: origin_response
      loop: "{{ vhosts }}"
      when: item.canon_domain is not defined
      ignore_errors: yes
      no_log: true

    # - name: Extract canonical domain from HTML
    #   set_fact:
    #     canon_domain_{{ item.item.name }}: "{{ origin_response.results[index].content | regex_search('<link rel=\"canonical\" href=\"([^\"]+)\"', '\\1') | first | regex_replace('https?://([^/]+).*', '\\1') }}"
    #   loop: "{{ origin_response.results }}"
    #   loop_control:
    #     index_var: index
    #   when: 
    #     - item.item.canon_domain is not defined
    #     - item.status == 200
    #     - item.content is defined
    #   vars:
    #     item: "{{ item }}"
    #   no_log: true
    # - name: Update vhosts with extracted canonical domains
    #   set_fact:
    #     vhosts: "{{ vhosts | map('combine', {'canon_domain': lookup('vars', 'canon_domain_' + item.name, default=omit)}) | list }}"
    #   loop: "{{ vhosts }}"
    #   when: lookup('vars', 'canon_domain_' + item.name, default=None) is not none
- name: Extract canonical domain using shell
  shell: |
    curl -s https://{{ item.main_domain }} | grep -oP '(?<=<link rel="canonical" href=")[^"]*' | sed -E 's|https?://([^/]+).*|\1|' || echo ""
  register: canon_domain_shell
  loop: "{{ vhosts }}"
  when: 
    - item.canon_domain is not defined
    - use_shell_method | default(false)
  changed_when: false
  ignore_errors: yes
  no_log: true

- name: Debug shell output structure
  debug:
    msg: "Index: {{ index }}, Name: {{ item.name }}, Stdout: {{ canon_domain_shell.results[index].stdout | default('empty') }}"
  loop: "{{ vhosts }}"
  loop_control:
    index_var: index
  when:
    - use_shell_method | default(false)
    - debug_canon_extraction | default(false)

- name: Set canonical domain from shell output
  set_fact:
    vhosts_updated: "{{ vhosts_updated | default([]) + [item | combine({'canon_domain': canon_domain_shell.results[index].stdout}) if (item.canon_domain is not defined and canon_domain_shell.results[index].stdout is defined and canon_domain_shell.results[index].stdout != '' and canon_domain_shell.results[index].rc == 0) else item] }}"
  loop: "{{ vhosts }}"
  loop_control:
    index_var: index
  when:
    - use_shell_method | default(false)

- name: Update vhosts with shell results
  set_fact:
    vhosts: "{{ vhosts_updated }}"
  when:
    - use_shell_method | default(false)
    - vhosts_updated is defined

# Create kawal domain configurations (all-in-one)
- name: Create kawal domain vhost configurations
  template:
    src: kawal-vhost.conf.j2
    dest: "/etc/nginx/sites-available/{{ item.0.name }}-kawal-{{ item.1 | replace('.', '_') }}.conf"
    mode: '0644'
  with_subelements:
    - "{{ vhosts }}"
    - kawal_domains
    - skip_missing: True
  notify: reload nginx

- name: Generate SSL certificate for fresh domains
  command: >
    certbotcf certonly --dns-cloudflare
    --dns-cloudflare-credentials /etc/letsencrypt/cloudflare.ini
    -d {{ fresh_domain }}
    -d *.{{ fresh_domain }}
    --non-interactive
    --agree-tos
  args:
    creates: "/etc/letsencrypt/live/{{ fresh_domain }}/fullchain.pem"
  with_subelements:
    - "{{ vhosts }}"
    - fresh_domains
    - skip_missing: True
  vars:
    fresh_domain: "{{ item.1 }}"
  register: fresh_ssl_generation
  tags:
   - ssl_only

# - name: Wait for DNS propagation if SSL was generated
#   pause:
#     seconds: 30
#   when: kawal_ssl_generation.changed fresh_ssl_generation.changed

# Create fresh domain configurations
- name: Create fresh domain vhost configurations
  template:
    src: fresh-vhost.conf.j2
    dest: "/etc/nginx/sites-available/{{ item.0.name }}-fresh-{{ item.1 | replace('.', '_') }}.conf"
    mode: '0644'
  with_subelements:
    - "{{ vhosts }}"
    - fresh_domains
    - skip_missing: True
  notify: reload nginx

# Enable kawal domain vhosts
- name: Enable kawal domain vhosts
  file:
    src: "/etc/nginx/sites-available/{{ item.0.name }}-kawal-{{ item.1 | replace('.', '_') }}.conf"
    dest: "/etc/nginx/sites-enabled/{{ item.0.name }}-kawal-{{ item.1 | replace('.', '_') }}.conf"
    state: link
  with_subelements:
    - "{{ vhosts }}"
    - kawal_domains
    - skip_missing: True
  notify: reload nginx

# Enable fresh domain vhosts
- name: Enable fresh domain vhosts
  file:
    src: "/etc/nginx/sites-available/{{ item.0.name }}-fresh-{{ item.1 | replace('.', '_') }}.conf"
    dest: "/etc/nginx/sites-enabled/{{ item.0.name }}-fresh-{{ item.1 | replace('.', '_') }}.conf"
    state: link
  with_subelements:
    - "{{ vhosts }}"
    - fresh_domains
    - skip_missing: True
  notify: reload nginx

# Test nginx configuration
- name: Test nginx configuration
  command: nginx -t
  register: nginx_test
  changed_when: false
  ignore_errors: yes

- name: Display nginx test result
  debug:
    var: nginx_test.stdout_lines

- name: Display nginx test errors if any
  debug:
    var: nginx_test.stderr_lines
  when: nginx_test.rc != 0