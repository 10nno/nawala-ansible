---
- name: Debug and Fix Redirect Issues for Kawal/Fresh Domains
  hosts: nawala
  become: yes
  vars_files:
    - "{{ vhost_config_file | default('vhost_config.yml') }}"
  tasks:
    # Task 1: Test current redirect behavior
    - name: Test redirect from kawal domain
      uri:
        url: "https://{{ item.1 }}/auto-login/?token=c3f89cbb48be6309b15fb84d65a6b81d"
        method: GET
        follow_redirects: none
        validate_certs: no
      register: redirect_test
      with_subelements:
        - "{{ vhosts }}"
        - kawal_domains
        - skip_missing: True
      ignore_errors: yes
      tags:
        - test_redirect

    - name: Display redirect results
      debug:
        msg: |
          Domain: {{ item.item.1 }}
          Status: {{ item.status }}
          Location: {{ item.location | default('No redirect') }}
      loop: "{{ redirect_test.results }}"
      when: redirect_test is defined
      tags:
        - test_redirect

    # Task 2: Check nginx access logs for redirect patterns
    - name: Check nginx access logs for recent redirects
      shell: |
        tail -n 100 /var/log/nginx/access.log | grep -E "(auto-login|token=)" | tail -n 10
      register: access_logs
      changed_when: false
      failed_when: false
      tags:
        - check_logs

    - name: Display access log entries
      debug:
        var: access_logs.stdout_lines
      when: access_logs.stdout_lines is defined
      tags:
        - check_logs

    # Task 3: Update fresh domain proxy configuration to handle redirects better
    - name: Create updated fresh domain configuration with better redirect handling
      template:
        src: fresh-vhost-fixed.conf.j2
        dest: "/etc/nginx/sites-available/{{ item.0.name }}-fresh-{{ item.1 | replace('.', '_') }}-fixed.conf"
        mode: '0644'
      with_subelements:
        - "{{ vhosts }}"
        - fresh_domains
        - skip_missing: True
      tags:
        - fix_config

    # Task 4: Create the fixed template file
    - name: Create fixed fresh domain template
      copy:
        content: |
          server {
              listen 80;
              server_name *.{{ item.1 }};
              return 302 https://$host$request_uri;
          }

          server {
              listen 443 ssl;
              ssl_certificate /etc/letsencrypt/live/{{ item.1 }}/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/{{ item.1 }}/privkey.pem;

              server_name *.{{ item.1 }};

              # Add debug logging
              access_log /var/log/nginx/{{ item.0.name }}_{{ item.1 | replace('.', '_') }}_access.log;
              error_log /var/log/nginx/{{ item.0.name }}_{{ item.1 | replace('.', '_') }}_error.log debug;

              location / {
                  proxy_ssl_server_name on;
                  proxy_pass https://{{ item.0.main_domain }};
                  proxy_set_header Accept-Encoding "";
                  proxy_set_header X-Forwarded-Proto $scheme;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Host $host;
                  proxy_set_header Cookie $http_cookie;
                  
                  # Preserve the original host in redirects
                  proxy_set_header Host $host;
                  
                  # Handle redirects from the upstream server
                  proxy_redirect https://{{ item.0.main_domain }}/ https://$host/;
                  proxy_redirect http://{{ item.0.main_domain }}/ https://$host/;
                  {% if item.0.canon_domain is defined %}
                  proxy_redirect https://{{ item.0.canon_domain }}/ https://$host/;
                  proxy_redirect http://{{ item.0.canon_domain }}/ https://$host/;
                  {% endif %}

                  # Enable sub_filter module
                  sub_filter_once off;
                  sub_filter_types text/html text/css text/javascript application/javascript application/json;
                  
                  # Replace domain references in content
                  sub_filter '{{ item.0.main_domain }}' '$host';
                  {% if item.0.canon_domain is defined %}
                  sub_filter '{{ item.0.canon_domain }}' '$host';
                  {% endif %}
                  
                  # Fix form actions and links
                  sub_filter 'href="https://{{ item.0.main_domain }}' 'href="https://$host';
                  sub_filter 'href="http://{{ item.0.main_domain }}' 'href="https://$host';
                  sub_filter 'action="https://{{ item.0.main_domain }}' 'action="https://$host';
                  sub_filter 'action="http://{{ item.0.main_domain }}' 'action="https://$host';
                  {% if item.0.canon_domain is defined %}
                  sub_filter 'href="https://{{ item.0.canon_domain }}' 'href="https://$host';
                  sub_filter 'href="http://{{ item.0.canon_domain }}' 'href="https://$host';
                  sub_filter 'action="https://{{ item.0.canon_domain }}' 'action="https://$host';
                  sub_filter 'action="http://{{ item.0.canon_domain }}' 'action="https://$host';
                  {% endif %}
                  
                  # Handle JavaScript redirects
                  sub_filter 'window.location.href = "https://{{ item.0.main_domain }}' 'window.location.href = "https://' + window.location.host + '';
                  sub_filter 'window.location = "https://{{ item.0.main_domain }}' 'window.location = "https://' + window.location.host + '';
                  {% if item.0.canon_domain is defined %}
                  sub_filter 'window.location.href = "https://{{ item.0.canon_domain }}' 'window.location.href = "https://' + window.location.host + '';
                  sub_filter 'window.location = "https://{{ item.0.canon_domain }}' 'window.location = "https://' + window.location.host + '';
                  {% endif %}
              }

              # Special handling for auto-login endpoint
              location /auto-login/ {
                  proxy_ssl_server_name on;
                  proxy_pass https://{{ item.0.main_domain }}/auto-login/;
                  proxy_set_header Accept-Encoding "";
                  proxy_set_header X-Forwarded-Proto $scheme;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Host $host;
                  proxy_set_header Cookie $http_cookie;
                  proxy_set_header Host $host;
                  
                  # Intercept any redirects and rewrite them
                  proxy_intercept_errors on;
                  proxy_redirect ~^https?://[^/]+(.*)$ https://$host$1;
                  
                  # Same sub_filter rules as above
                  sub_filter_once off;
                  sub_filter_types text/html text/css text/javascript application/javascript application/json;
                  sub_filter '{{ item.0.main_domain }}' '$host';
                  {% if item.0.canon_domain is defined %}
                  sub_filter '{{ item.0.canon_domain }}' '$host';
                  {% endif %}
              }

              gzip on;
              gzip_disable "msie6";
              gzip_vary on;
              gzip_comp_level 6;
              gzip_min_length 1100;
              gzip_buffers 16 8k;
              gzip_proxied any;
              gzip_types
                  text/plain
                  text/css
                  text/js
                  text/xml
                  text/javascript
                  application/javascript
                  application/x-javascript
                  application/json
                  application/xml
                  application/rss+xml
                  image/svg+xml;
          }
        dest: "/tmp/fresh-vhost-fixed.conf.j2"
      with_subelements:
        - "{{ vhosts }}"
        - fresh_domains
        - skip_missing: True
      tags:
        - create_template

    # Task 5: Test specific auto-login path
    - name: Debug auto-login redirect chain
      shell: |
        curl -I -L --max-redirs 5 "https://{{ item.1 }}/auto-login/?token=testtoken" 2>&1 | grep -E "(HTTP/|Location:|Host:)"
      register: curl_test
      with_subelements:
        - "{{ vhosts }}"
        - kawal_domains
        - skip_missing: True
      changed_when: false
      failed_when: false
      tags:
        - test_curl

    - name: Display curl test results
      debug:
        msg: |
          Domain: {{ item.item.1 }}
          Output: {{ item.stdout_lines }}
      loop: "{{ curl_test.results }}"
      when: curl_test is defined
      tags:
        - test_curl

    # Task 6: Apply fix if requested
    - name: Apply fixed configuration
      block:
        - name: Disable current fresh domain configs
          file:
            path: "/etc/nginx/sites-enabled/{{ item.0.name }}-fresh-{{ item.1 | replace('.', '_') }}.conf"
            state: absent
          with_subelements:
            - "{{ vhosts }}"
            - fresh_domains
            - skip_missing: True

        - name: Enable fixed fresh domain configs
          file:
            src: "/etc/nginx/sites-available/{{ item.0.name }}-fresh-{{ item.1 | replace('.', '_') }}-fixed.conf"
            dest: "/etc/nginx/sites-enabled/{{ item.0.name }}-fresh-{{ item.1 | replace('.', '_') }}-fixed.conf"
            state: link
          with_subelements:
            - "{{ vhosts }}"
            - fresh_domains
            - skip_missing: True

        - name: Test nginx configuration
          command: nginx -t
          register: nginx_test
          changed_when: false

        - name: Reload nginx if config is valid
          service:
            name: nginx
            state: reloaded
          when: nginx_test.rc == 0
      when: apply_fix is defined and apply_fix | bool
      tags:
        - apply_fix

    # Task 7: Monitor redirect behavior after fix
    - name: Test redirect after fix
      uri:
        url: "https://{{ item.1 }}/auto-login/?token=c3f89cbb48be6309b15fb84d65a6b81d"
        method: GET
        follow_redirects: all
        validate_certs: no
      register: redirect_test_after
      with_subelements:
        - "{{ vhosts }}"
        - kawal_domains
        - skip_missing: True
      ignore_errors: yes
      when: apply_fix is defined and apply_fix | bool
      tags:
        - test_after_fix

    - name: Display final redirect destination
      debug:
        msg: |
          Domain: {{ item.item.1 }}
          Final URL: {{ item.url }}
          Status: {{ item.status }}
      loop: "{{ redirect_test_after.results }}"
      when: redirect_test_after is defined
      tags:
        - test_after_fix